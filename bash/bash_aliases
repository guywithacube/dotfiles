#!/usr/bin/env bash
# vim: set filetype=sh :

#==========
# Colorize
#==========
# https://superuser.com/a/879035
export CLICOLOR=1 # for *BSD/darwin
ls --color=auto &> /dev/null && alias ls="ls --color=auto" ||

alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"

#==========
# Extend cd
#==========
alias ..="cd .."
alias ...="cd ../.."

#==========
# Extend ls
#==========
alias ll="ls -alF"
alias la="ls -A"
alias l="ls -CF"
alias lsla="ls -al"

#==========
# Extend tmux
#==========
alias ta="tmux attach"
alias tat="tmux attach -t "
alias tn="tmux new-session"
alias tl="tmux ls"

#==========
# Git
#==========
alias g="git"
alias ga="git add"
alias gai="git add -i"
alias gc="git commit"
alias gd="git diff"
alias gl="git log"
alias gs="git status"

#==========
# Clear
#==========
alias cl="clear"

#==========
# Typos
#==========
alias :q="simulateVimExit"
alias jk:q="simulateVimExit"
alias qq="simulateVimExit"
simulateVimExit() {
echo -e "Assuming you meant exit...\nPress (Q) to skip countdown or any other key to cancel."
	for i in {3..1}; do
		# https://unix.stackexchange.com/a/26592
		echo -e -n "\e[2K\rExiting in $i"
		# https://stackoverflow.com/a/33614961
		read -n 1 -t 1 input
		if [ $? == 0 ]; then
			if [[ $input == "q" || $input == "Q" ]]; then
				echo -e -n "\e[2K\rBye"
				break
			fi
			echo -e "\nCancelled"
			return
		fi
	done
	exit
}

#==========
# Tools
#==========
alias rc="reloadBashrc"
reloadBashrc() {
	source ~/.bashrc
	echo "Reloaded bashrc"
}

alias th="toggleHistory"
toggleHistory() {
	if historyEnabled; then
		echo "Disabling history"
		set +o history
	else
		echo "Enabling history"
		set -o history
	fi
}

historyEnabled() {
	# https://stackoverflow.com/a/1397020
	if [[ ":$SHELLOPTS:" == *":history:"* ]]; then
		# history is enabled
		return 0
	else
		# history is NOT enabled
		return 1
	fi
}

colors() {
	$SCRIPTS_DIR/show-all-256-colors.py
}

# sudo does not work well with functions and aliases, use smartSudo for those cases
# https://unix.stackexchange.com/a/438712
alias ssudo="smartSudo"
function smartSudo {
	local firstArg=$1
	if [ $(type -t $firstArg) = function ]
	then
		shift && command sudo bash -c "$(declare -f $firstArg);$firstArg $*"
	elif [ $(type -t $firstArg) = alias ]
	then
		alias sudo='\sudo '
		eval "sudo $@"
	else
		command sudo "$@"
	fi
}

